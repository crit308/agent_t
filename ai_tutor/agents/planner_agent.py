from pydantic import BaseModel, Field
from typing import List, Dict, Any
import os
import openai

from agents import Agent, FileSearchTool, function_tool

class LearningObjective(BaseModel):
    """Represents a specific learning objective within the lesson plan."""
    title: str = Field(description="The title of the learning objective")
    description: str = Field(description="A detailed description of what the student should learn")
    priority: int = Field(description="Priority from 1-5, with 5 being highest priority")


class LessonSection(BaseModel):
    """Represents a section of the lesson plan."""
    title: str = Field(description="The title of the section")
    objectives: List[LearningObjective] = Field(description="The learning objectives for this section")
    estimated_duration_minutes: int = Field(description="Estimated time in minutes to complete this section")
    concepts_to_cover: List[str] = Field(description="Key concepts that should be covered in this section")


class LessonPlan(BaseModel):
    """The complete lesson plan generated by the planner agent."""
    title: str = Field(description="The overall title of the lesson plan")
    description: str = Field(description="A short description of what the student will learn")
    target_audience: str = Field(description="Who this lesson is designed for (e.g., 'Beginners to machine learning')")
    prerequisites: List[str] = Field(description="Prerequisites that students should know before taking this lesson")
    sections: List[LessonSection] = Field(description="The sections that make up this lesson plan")
    total_estimated_duration_minutes: int = Field(description="Total estimated time to complete the lesson")
    additional_resources: List[str] = Field(description="Additional resources that might help students")


def create_planner_agent(vector_store_id: str, api_key: str = None):
    """Create a planner agent with access to the provided vector store."""
    
    # If API key is provided, ensure it's set in environment
    if api_key:
        os.environ["OPENAI_API_KEY"] = api_key
    
    # Ensure OPENAI_API_KEY is set in the environment
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        print("WARNING: OPENAI_API_KEY environment variable is not set!")
    else:
        print(f"Using OPENAI_API_KEY from environment for planner agent")
    
    # Create a FileSearchTool that can search the vector store containing the uploaded documents
    file_search_tool = FileSearchTool(
        vector_store_ids=[vector_store_id],
        max_num_results=5,
        include_search_results=True,
    )
    
    print(f"Created FileSearchTool for vector store: {vector_store_id}")
    
    # Create the planner agent with access to the file search tool
    planner_agent = Agent(
        name="Lesson Planner",
        instructions="""
        You are an expert curriculum designer and educator. Your task is to create a 
        well-structured lesson plan based on the documents that have been uploaded.
        
        Follow these steps:
        1. First, analyze the uploaded documents to understand their content and structure.
           Use the file_search tool to search through the documents.
        2. Identify the key topics, concepts, and skills that should be taught.
        3. Create a coherent lesson plan that organizes the content into logical sections.
        4. For each section, define clear learning objectives, key concepts, and estimate 
           how long it would take to teach.
        5. Consider the appropriate sequence for teaching the material.
        6. Consider who the target audience might be and any prerequisites they should know.
        7. Format your response as a structured LessonPlan.
        
        Your lesson plan should be comprehensive but focused on the most important aspects 
        of the material. Break complex topics into manageable sections.
        
        IMPORTANT: You MUST use the file_search tool to find information in the uploaded documents.
        Start by searching for general terms like "introduction", "overview", or specific topics
        mentioned in the documents.
        """,
        tools=[file_search_tool],
        output_type=LessonPlan,
        model="o3-mini",
    )
    
    return planner_agent 
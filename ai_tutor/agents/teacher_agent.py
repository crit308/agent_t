from __future__ import annotations

import os
import openai
import json

from agents import Agent, FileSearchTool, Runner, handoff, HandoffInputData, function_tool, ModelProvider
from agents.models.openai_provider import OpenAIProvider
from agents.extensions.handoff_prompt import prompt_with_handoff_instructions
from agents.run_context import RunContextWrapper

from ai_tutor.agents.models import LessonPlan, LessonSection, LessonContent
from typing import List, Callable, Optional, Any, Dict, TYPE_CHECKING, Union
from ai_tutor.agents.quiz_creator_agent import create_quiz_creator_agent
from ai_tutor.agents.utils import process_handoff_data, RoundingModelWrapper

# Import the new tools
from ai_tutor.tools.teacher_tools import present_explanation, ask_checking_question
# Import necessary response types for the agent's output_type
from ai_tutor.api_models import ExplanationResponse, QuestionResponse, MessageResponse, ErrorResponse # Add ErrorResponse if needed

if TYPE_CHECKING:
    from ai_tutor.context import TutorContext


# The Teacher Agent's final output for a *single interaction turn* will be
# one of the responses generated by its tools.
TeacherInteractionOutput = Union[
    ExplanationResponse,
    QuestionResponse,
    # MessageResponse, # Uncomment if you add more tools like prompt_for_summary
    # ErrorResponse # Uncomment if the agent needs to signal an internal error
]

def create_interactive_teacher_agent(vector_store_id: str) -> Agent['TutorContext']:
    """Creates an INTERACTIVE Teacher Agent."""

    provider: OpenAIProvider = OpenAIProvider()
    # Maybe use a slightly more capable model for interactive logic
    base_model = provider.get_model("gpt-4o-mini")

    file_search_tool = FileSearchTool(
        vector_store_ids=[vector_store_id],
        max_num_results=3 # Fewer results might be needed for focused segment explanation
    )

    # Define the tools the *teacher itself* can use
    teacher_tools = [
        file_search_tool,
        present_explanation,
        ask_checking_question,
        # prompt_for_summary # Add if implemented
    ]

    teacher_agent = Agent['TutorContext'](
        name="InteractiveLessonTeacher",
        # Instructions focus on the interactive loop for *one topic*
        instructions="""
        You are an interactive AI teacher responsible for explaining a specific topic segment by segment and checking user understanding.

        YOUR CONTEXT:
        - You will be given the `current_teaching_topic` and the `current_topic_segment_index` to focus on via the RunContext.
        - You may also receive the user's last response if you previously asked a question (`pending_interaction_type` will be set).
        - Use the `file_search` tool *only* if necessary to get specific details for the *current segment* you need to explain.

        YOUR INTERACTIVE WORKFLOW FOR A TOPIC:
        1.  **Check for Pending Interaction:** If the context indicates you were waiting for a user response (e.g., to a checking question), evaluate that response first.
        2.  **Decide Next Micro-Step:** Based on the current segment index and any user response evaluation:
            *   If starting a topic (segment 0) or continuing after successful interaction: Explain the *next* segment.
            *   If user struggled with a previous check: Re-explain the *previous* segment differently or provide an example.
            *   After explaining a few segments: Ask a checking question.
            *   If the explanation for the topic is complete: Indicate this (e.g., set `is_last_segment=True` in `present_explanation`).
        3.  **Execute Micro-Step using Tools:**
            *   **To Explain:** Call the `present_explanation` tool with the text for the *current segment*, the `segment_index`, and whether it's the `is_last_segment` for this topic. **This ends your turn.**
            *   **To Check Understanding:** Call the `ask_checking_question` tool with a relevant `QuizQuestion` object focusing on the recently explained content. **This ends your turn.**
            *   **(Optional) To Prompt Summary:** Call `prompt_for_summary` tool. **This ends your turn.**
        4.  **Your final action MUST be a call to ONE of the available tools (`present_explanation`, `ask_checking_question`, etc.).** The result of that tool call will be the output relayed to the user.

        CRITICAL:
        - Focus ONLY on the `current_teaching_topic` and `current_topic_segment_index`.
        - Your goal is to take ONE step in the interactive loop (explain or ask).
        - You MUST end your turn by calling exactly one interaction tool (`present_explanation`, `ask_checking_question`).
        """,
        tools=teacher_tools,
        # The output type is now the *result* of one of its interaction tools
        output_type=TeacherInteractionOutput,
        model=base_model,
        # No handoffs needed FROM the teacher in this model
    )
    return teacher_agent

# Removed old functions:
# - lesson_content_handoff_filter
# - create_teacher_agent
# - create_teacher_agent_without_handoffs
# - generate_lesson_content 
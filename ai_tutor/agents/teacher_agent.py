from __future__ import annotations

import os
import openai
import json

from agents import Agent, FileSearchTool, Runner, handoff, HandoffInputData, function_tool, ModelProvider
from agents.models.openai_provider import OpenAIProvider
from agents.extensions.handoff_prompt import prompt_with_handoff_instructions
from agents.run_context import RunContextWrapper

from ai_tutor.agents.models import ExplanationResult # Import result type
from typing import List, Callable, Optional, Any, Dict, TYPE_CHECKING, Union
from ai_tutor.agents.utils import process_handoff_data, RoundingModelWrapper

# Import the new tools
# from ai_tutor.tools.teacher_tools import present_explanation, ask_checking_question
# Import necessary response types for the agent's output_type
# from ai_tutor.api_models import ExplanationResponse, QuestionResponse, MessageResponse, ErrorResponse

if TYPE_CHECKING:
    from ai_tutor.context import TutorContext


# The Teacher Agent's final output for a *single interaction turn* will be
# one of the responses generated by its tools.
# TeacherInteractionOutput = Union[
#     ExplanationResponse,
#     QuestionResponse,
#     # MessageResponse, # Uncomment if you add more tools like prompt_for_summary
#     # ErrorResponse # Uncomment if the agent needs to signal an internal error
# ]

def create_interactive_teacher_agent(vector_store_id: str) -> Agent['TutorContext', ExplanationResult]:
    """Creates an INTERACTIVE Teacher Agent."""

    provider: OpenAIProvider = OpenAIProvider()
    # Maybe use a slightly more capable model for interactive logic
    base_model = provider.get_model("gpt-4o-2024-08-06")

    file_search_tool = FileSearchTool(
        vector_store_ids=[vector_store_id],
        max_num_results=3 # Fewer results might be needed for focused segment explanation
    )

    # Define the tools the *teacher itself* can use
    teacher_tools = [
        file_search_tool, # Still needs file search for content generation
        # The agent's task *is* to explain, so 'present_explanation' is not a tool it calls, but its output goal.
        # Similarly, 'ask_checking_question' is an *action* it takes, represented by its output, not a tool it calls.
    ]

    # Specify context type generically, output_type via parameter
    teacher_agent = Agent['TutorContext'](
        name="InteractiveLessonTeacher",
        # Instructions focus on the interactive loop for *one topic*
        instructions="""
        You are an expert AI teacher responsible for explaining a specific topic or concept clearly.

        YOUR CONTEXT:
        - You will be given instructions via the prompt about **what specific topic/concept to explain** and potentially **what aspect to focus on** (e.g., "explain 'variable scope' focusing on local vs global", "provide an example of closures").
        - Use the `file_search` tool *only* if necessary to retrieve specific information or examples related to the requested explanation from the provided documents.

        YOUR TASK:
        1.  Understand the specific explanation request from the prompt.
        2.  If necessary, use `file_search` to gather precise details or examples.
        3.  Synthesize the information into a clear, concise, and accurate explanation tailored to the request.
        4.  Format your final output ONLY as an `ExplanationResult` object.
            *   Set `status` to "delivered".
            *   Put the full explanation text in the `details` field.

        **CRITICAL:**
        - Focus ONLY on generating the requested explanation.
        - Do NOT ask follow-up questions or try to manage a conversation.
        - Your final output MUST be a single, valid `ExplanationResult` JSON object.
        """,
        tools=teacher_tools,
        model=base_model,
        # tool_use_behavior="stop_on_first_tool", # Keep default or adjust as needed
        # No handoffs needed FROM the teacher in this model
    )
    return teacher_agent

# Removed old functions:
# - lesson_content_handoff_filter
# - create_teacher_agent
# - create_teacher_agent_without_handoffs
# - generate_lesson_content 
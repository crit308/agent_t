import os
import openai
from datetime import datetime
from typing import Dict, Any, Optional, List

from agents import Agent, Runner, trace, RunConfig
from agents.extensions.handoff_prompt import prompt_with_handoff_instructions

from ai_tutor.agents.models import (
    LessonPlan, 
    LessonContent, 
    Quiz, 
    QuizUserAnswers, 
    QuizFeedback,
    LearningInsight,
    TeachingInsight,
    SessionAnalysis
)


def create_session_analyzer_agent(api_key: str = None):
    """Create a session analyzer agent that evaluates the entire teaching workflow.
    
    Args:
        api_key: The OpenAI API key to use for the agent
        
    Returns:
        An Agent configured for session analysis
    """
    # If API key is provided, ensure it's set in environment
    if api_key:
        os.environ["OPENAI_API_KEY"] = api_key
    
    # Ensure OPENAI_API_KEY is set in the environment
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        print("WARNING: OPENAI_API_KEY environment variable is not set for session analyzer agent!")
    else:
        print(f"Using OPENAI_API_KEY from environment for session analyzer agent")
    
    # Create the session analyzer agent
    session_analyzer_agent = Agent(
        name="Session Analyzer",
        instructions=prompt_with_handoff_instructions("""
        You are an expert educational analyst specialized in evaluating teaching sessions.
        
        Your task is to analyze the entire AI tutor workflow including:
        1. The lesson plan generated by the planner agent
        2. The teaching content created by the teacher agent
        3. The quiz created by the quiz creator agent
        4. The student's answers to the quiz questions
        5. The feedback provided by the quiz teacher agent
        
        You will have access to ALL raw outputs from the previous agents in the workflow, including:
        - The complete session information
        - The full lesson plan with all sections and objectives
        - The entire lesson content with all explanations and exercises
        - All quiz questions, options, and correct answers
        - Every user answer to each quiz question
        - The comprehensive quiz feedback, including specific feedback for each question
        
        When analyzing, pay particular attention to:
        - Did the student show comprehension of the material?
        - Were the teaching methods effective for the subject matter?
        - Did the quiz accurately assess the key learning objectives?
        - What patterns can be identified in the student's incorrect answers?
        - How well did the overall workflow progress from planning to assessment?
        - What insights can be derived to improve future teaching sessions?
        
        Guidelines for providing effective analysis:
        - Be objective and evidence-based in your assessments
        - Identify both strengths and areas for improvement
        - Provide specific examples from the session to support your insights
        - Make actionable recommendations for improving future sessions
        - Consider the alignment between lesson objectives, content, assessment, and outcomes
        - Evaluate the effectiveness of the teaching methods used
        - Be comprehensive in your analysis - use all the available information
        
        Format your response as a structured SessionAnalysis object.
        
        YOUR OUTPUT MUST BE ONLY A VALID SESSIONANALYSIS OBJECT.
        """),
        output_type=SessionAnalysis,
        model="gpt-4o",  # Changed from "o4" to "gpt-4o" which supports structured output
    )
    
    return session_analyzer_agent


async def analyze_teaching_session(
    lesson_plan: LessonPlan, 
    lesson_content: LessonContent, 
    quiz: Quiz, 
    user_answers: QuizUserAnswers, 
    quiz_feedback: QuizFeedback,
    session_duration_seconds: int,
    raw_agent_outputs: Optional[Dict[str, str]] = None,
    api_key: str = None,
    document_analysis = None,
    context = None
) -> SessionAnalysis:
    """Analyze a complete teaching session and generate insights.
    
    Args:
        lesson_plan: The lesson plan created by the planner agent
        lesson_content: The lesson content created by the teacher agent
        quiz: The quiz created by the quiz creator agent
        user_answers: The user's answers to the quiz
        quiz_feedback: The feedback provided by the quiz teacher agent
        session_duration_seconds: Total duration of the session in seconds
        raw_agent_outputs: Dictionary containing the raw outputs from all agents in the workflow
        api_key: The OpenAI API key to use
        document_analysis: Optional document analysis to include
        context: Optional context object with session_id for tracing
        
    Returns:
        A SessionAnalysis object with insights about the teaching session
    """
    # Create the session analyzer agent
    agent = create_session_analyzer_agent(api_key)
    
    # Generate a unique session ID
    session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # Format all the data as a string for the session analyzer agent
    prompt = f"""
    SESSION INFORMATION:
    
    Session ID: {session_id}
    Session Duration: {session_duration_seconds} seconds
    
    LESSON PLAN:
    
    Title: {lesson_plan.title}
    Description: {lesson_plan.description}
    Target Audience: {lesson_plan.target_audience}
    Total Estimated Duration: {lesson_plan.total_estimated_duration_minutes} minutes
    
    Prerequisites:
    """
    
    for prereq in lesson_plan.prerequisites:
        prompt += f"- {prereq}\n"
    
    prompt += f"\nSections:\n"
    
    for i, section in enumerate(lesson_plan.sections):
        prompt += f"""
        Section {i+1}: {section.title}
        Estimated Duration: {section.estimated_duration_minutes} minutes
        
        Learning Objectives:
        """
        
        for obj in section.objectives:
            prompt += f"- {obj.title}: {obj.description} (Priority: {obj.priority})\n"
        
        prompt += f"\nConcepts to Cover:\n"
        for concept in section.concepts_to_cover:
            prompt += f"- {concept}\n"
    
    prompt += f"""
    
    LESSON CONTENT:
    
    Title: {lesson_content.title}
    Introduction: {lesson_content.introduction}
    
    """
    
    for i, section in enumerate(lesson_content.sections):
        prompt += f"""
        Section {i+1}: {section.title}
        Introduction: {section.introduction}
        
        Key Explanations:
        """
        
        for explanation in section.explanations:
            prompt += f"""
            Topic: {explanation.topic}
            Explanation: {explanation.explanation}
            Examples: {', '.join(explanation.examples)}
            """
        
        prompt += f"\nExercises:\n"
        for j, exercise in enumerate(section.exercises):
            prompt += f"""
            Exercise {j+1}: {exercise.question}
            Difficulty: {exercise.difficulty_level}
            Answer: {exercise.answer}
            Explanation: {exercise.explanation}
            """
        
        prompt += f"\nSummary: {section.summary}\n"
    
    prompt += f"""
    
    Conclusion: {lesson_content.conclusion}
    
    Next Steps:
    """
    
    for step in lesson_content.next_steps:
        prompt += f"- {step}\n"
    
    prompt += f"""
    
    QUIZ:
    
    Title: {quiz.title}
    Description: {quiz.description}
    Passing Score: {quiz.passing_score}/{quiz.total_points}
    Estimated Completion Time: {quiz.estimated_completion_time_minutes} minutes
    
    Questions:
    """
    
    for i, question in enumerate(quiz.questions):
        prompt += f"""
        Question {i+1}: {question.question}
        Difficulty: {question.difficulty}
        Related Section: {question.related_section}
        
        Options:
        """
        
        for j, option in enumerate(question.options):
            prompt += f"Option {j+1}: {option}\n"
        
        prompt += f"""
        Correct Answer: Option {question.correct_answer_index + 1}
        Explanation: {question.explanation}
        """
    
    prompt += f"""
    
    USER QUIZ ANSWERS:
    
    Quiz Title: {user_answers.quiz_title}
    Total Time Taken: {user_answers.total_time_taken_seconds} seconds
    
    Answers:
    """
    
    for answer in user_answers.user_answers:
        question_index = answer.question_index
        selected_option_index = answer.selected_option_index
        
        # Ensure the question index is valid
        if question_index < len(quiz.questions):
            question = quiz.questions[question_index]
            selected_option = question.options[selected_option_index] if selected_option_index < len(question.options) else "Invalid option"
            correct_option = question.options[question.correct_answer_index] if question.correct_answer_index < len(question.options) else "Invalid option"
            is_correct = selected_option_index == question.correct_answer_index
            
            prompt += f"""
            Question {question_index + 1}: {question.question}
            User Selected: Option {selected_option_index + 1} - {selected_option}
            Correct Answer: Option {question.correct_answer_index + 1} - {correct_option}
            Result: {"Correct" if is_correct else "Incorrect"}
            Time Taken: {answer.time_taken_seconds} seconds
            """
    
    prompt += f"""
    
    QUIZ FEEDBACK:
    
    Quiz Title: {quiz_feedback.quiz_title}
    Score: {quiz_feedback.correct_answers}/{quiz_feedback.total_questions} ({quiz_feedback.score_percentage:.1f}%)
    Pass/Fail: {"Passed" if quiz_feedback.passed else "Failed"}
    
    Feedback Items:
    """
    
    for item in quiz_feedback.feedback_items:
        prompt += f"""
        Question: {item.question_text}
        User Answer: {item.user_selected_option}
        Correct: {"Yes" if item.is_correct else "No"}
        Correct Answer: {item.correct_option if not item.is_correct else "Same as user answer"}
        Explanation: {item.explanation}
        {"Improvement Suggestion: " + item.improvement_suggestion if not item.is_correct and item.improvement_suggestion else ""}
        """
    
    prompt += f"""
    
    Overall Feedback: {quiz_feedback.overall_feedback}
    
    Suggested Study Topics:
    """
    
    for topic in quiz_feedback.suggested_study_topics:
        if topic:  # Skip empty topics
            prompt += f"- {topic}\n"
    
    prompt += f"""
    
    Next Steps:
    """
    
    for step in quiz_feedback.next_steps:
        prompt += f"- {step}\n"

    # Add document analysis if provided
    if document_analysis:
        prompt += f"""
        
        DOCUMENT ANALYSIS:
        =================
        {document_analysis}
        """
    
    # Add raw agent outputs if provided
    if raw_agent_outputs:
        prompt += f"""
        
        RAW AGENT OUTPUTS:
        ==================
        """
        
        for agent_name, output in raw_agent_outputs.items():
            prompt += f"""
            
            {agent_name.upper()} OUTPUT:
            -------------------------
            {output}
            -------------------------
            """
    
    prompt += f"""
    
    INSTRUCTIONS:
    
    Based on all this information, create a comprehensive analysis of the teaching session.
    
    Analyze:
    1. The overall effectiveness of the teaching session
    2. The quality of the lesson plan, teaching content, and quiz
    3. The student's learning and performance
    4. The teaching methodology's effectiveness
    5. Recommendations for improvement
    
    YOUR OUTPUT MUST BE ONLY A VALID SESSIONANALYSIS OBJECT.
    """
    
    # Setup RunConfig for tracing
    run_config = None
    if context and hasattr(context, 'session_id'):
        run_config = RunConfig(
            workflow_name="AI Tutor - Session Analysis",
            group_id=context.session_id # Link traces within the same session
        )
    elif api_key:
        # If no context provided but we have API key, create a basic RunConfig
        run_config = RunConfig(
            workflow_name="AI Tutor - Session Analysis"
        )
    
    # Run the session analyzer agent
    result = await Runner.run(
        agent, 
        prompt,
        run_config=run_config,
        context=context
    )
    
    # Get the session analysis result
    try:
        session_analysis = result.final_output_as(SessionAnalysis)
        
        # Append the session analysis to the Knowledge Base file
        try:
            # Convert the session analysis to a formatted string
            session_analysis_text = f"""
            
            SESSION ANALYSIS: {session_id}
            ==============================================
            
            Overall Effectiveness: {session_analysis.overall_effectiveness:.2f}/5.0
            
            Strengths:
            {chr(10).join(f"- {s}" for s in session_analysis.strengths)}
            
            Improvement Areas:
            {chr(10).join(f"- {a}" for a in session_analysis.improvement_areas)}
            
            Lesson Plan Quality: {session_analysis.lesson_plan_quality:.2f}/5.0
            Content Quality: {session_analysis.content_quality:.2f}/5.0
            Quiz Quality: {session_analysis.quiz_quality:.2f}/5.0
            Student Performance: {session_analysis.student_performance:.2f}/5.0
            Teaching Effectiveness: {session_analysis.teaching_effectiveness:.2f}/5.0
            
            Recommendations:
            {chr(10).join(f"- {r}" for r in session_analysis.recommendations)}
            
            Suggested Resources:
            {chr(10).join(f"- {r}" for r in session_analysis.suggested_resources)}
            """
            
            # Check if the Knowledge Base file exists
            if os.path.exists("Knowledge Base"):
                # Append to the existing file
                with open("Knowledge Base", "a", encoding="utf-8") as f:
                    f.write(session_analysis_text)
                print("Session analysis appended to 'Knowledge Base' file")
            else:
                # Create a new file if it doesn't exist
                with open("Knowledge Base", "w", encoding="utf-8") as f:
                    f.write("KNOWLEDGE BASE\n=============\n\nSession Analysis:\n")
                    f.write(session_analysis_text)
                print("Created new 'Knowledge Base' file with session analysis")
        except Exception as e:
            print(f"Error appending session analysis to 'Knowledge Base': {str(e)}")
            # Try with fallback encoding
            try:
                if os.path.exists("Knowledge Base"):
                    with open("Knowledge Base", "a", encoding="ascii", errors="ignore") as f:
                        f.write(session_analysis_text)
                else:
                    with open("Knowledge Base", "w", encoding="ascii", errors="ignore") as f:
                        f.write("KNOWLEDGE BASE\n=============\n\nSession Analysis:\n")
                        f.write(session_analysis_text)
                print("Session analysis appended to 'Knowledge Base' file (with encoding fallback)")
            except Exception as e2:
                print(f"Could not append session analysis to 'Knowledge Base': {str(e2)}")
        
        return session_analysis
    except Exception as e:
        print(f"Error parsing session analysis output: {e}")
        # Return a minimal analysis object if parsing fails
        return SessionAnalysis(
            session_id=session_id,
            session_duration_seconds=session_duration_seconds,
            overall_effectiveness=0.0,
            strengths=[],
            improvement_areas=["Error generating session analysis. See logs for details."],
            lesson_plan_quality=0.0,
            lesson_plan_insights=[],
            content_quality=0.0,
            content_insights=[],
            quiz_quality=0.0,
            quiz_insights=[],
            student_performance=0.0,
            learning_insights=[],
            teaching_effectiveness=0.0,
            teaching_insights=[],
            recommendations=["Contact support for assistance with session analysis."],
            recommended_adjustments=[],
            suggested_resources=[]
        ) 
import logging # Add logging
from fastapi import APIRouter, HTTPException, Depends, Request, Body
from supabase import Client
from gotrue.types import User # To type hint the user object
from uuid import UUID # Import UUID

from ai_tutor.session_manager import SupabaseSessionService, Session # Import correct service and Session type
from ai_tutor.api_models import SessionResponse
from ai_tutor.dependencies import get_session_service # Use the correct dependency
from ai_tutor.auth import verify_token # Get auth dependency
from pydantic import BaseModel

router = APIRouter()
logger = logging.getLogger(__name__) # Add logger

@router.post(
    "/sessions",
    response_model=SessionResponse,
    status_code=201,
    summary="Create New Tutoring Session",
    tags=["Session Management"],
    dependencies=[Depends(verify_token)] # Ensure auth is checked
)
async def create_new_session_for_folder(
    request: Request, # Access user from request state
    folder_id: UUID = Body(..., embed=True, description="The ID of the folder to associate the session with."), # Get folder_id from body
    session_service: SupabaseSessionService = Depends(get_session_service) # Inject service
):
    """Creates a new session linked to a specific folder."""
    user: User = request.state.user # Get user from verified token

    # --- Construct initial state for SessionService ---
    initial_state = {
        "folder_id": str(folder_id),
        "user_id": str(user.id),     # Pass user_id for validation/consistency checks
        # session_id will be generated by the service if not provided
    }

    try:
        # Pass initial state to the service
        session: Session = session_service.create_session(
            app_name="ai_tutor",
            user_id=str(user.id),
            state=initial_state # Pass the constructed state
        )
        logger.info(f"Created session {session.id} for folder {folder_id}")
        return SessionResponse(session_id=UUID(session.id)) # Return the actual generated/used ID
    except ValueError as ve: # Catch validation errors from create_session
        logger.error(f"Failed to create session due to invalid input: {ve}")
        raise HTTPException(status_code=400, detail=str(ve))
    except HTTPException as he: # Re-raise HTTP exceptions from service
        raise he
    except Exception as e:
        logger.exception(f"Failed to create session via service for folder {folder_id}: {e}")
        raise HTTPException(status_code=500, detail="Failed to create session.")

# Removed the duplicate/older create_new_session endpoint 
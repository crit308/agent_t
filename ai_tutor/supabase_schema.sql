-- Supabase Schema Initialization for AI Tutor Project
-- Run these commands in the Supabase SQL Editor.
-- Last Updated: 2024-04-07

-- ==========================================
-- 1. SESSIONS TABLE SETUP
-- ==========================================
-- Description: Stores the context and state for each user's tutoring session.

-- Create the folders table first
CREATE TABLE public.folders (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    name character varying NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    vector_store_id character varying(255) NULL, -- Store the OpenAI vector store ID
    knowledge_base text NULL, -- Store the analysis text here
    CONSTRAINT folders_pkey PRIMARY KEY (id),
    CONSTRAINT folders_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

-- Add comments for folders table
COMMENT ON TABLE public.folders IS 'Stores user-created folders for organizing documents and learning content.';
COMMENT ON COLUMN public.folders.id IS 'Unique identifier for the folder.';
COMMENT ON COLUMN public.folders.user_id IS 'Links to the authenticated user who owns the folder.';
COMMENT ON COLUMN public.folders.name IS 'User-defined name for the folder.';
COMMENT ON COLUMN public.folders.created_at IS 'Timestamp when the folder was created.';
COMMENT ON COLUMN public.folders.updated_at IS 'Timestamp when the folder was last updated.';
COMMENT ON COLUMN public.folders.vector_store_id IS 'The OpenAI vector store ID associated with this folder''s documents.';
COMMENT ON COLUMN public.folders.knowledge_base IS 'Stores the text content generated by the document analyzer agent.';

-- Enable RLS for folders table
ALTER TABLE public.folders ENABLE ROW LEVEL SECURITY;

-- Create the table
CREATE TABLE public.sessions (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    context_data jsonb NOT NULL, -- Store the TutorContext object here
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    folder_id uuid NULL, -- Link to the folder this session belongs to
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT sessions_pkey PRIMARY KEY (id),
    CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT sessions_folder_id_fkey FOREIGN KEY (folder_id) REFERENCES public.folders(id) ON UPDATE CASCADE ON DELETE SET NULL -- Or CASCADE if sessions should be deleted with folders
);

-- Add comments
COMMENT ON TABLE public.sessions IS 'Stores AI tutor session state and context for users.';
COMMENT ON COLUMN public.sessions.folder_id IS 'Links to the folder containing the documents for this session.';
COMMENT ON COLUMN public.sessions.id IS 'Unique identifier for the session.';
COMMENT ON COLUMN public.sessions.user_id IS 'Links to the authenticated user who owns the session.';
COMMENT ON COLUMN public.sessions.context_data IS 'JSONB blob containing the serialized TutorContext Pydantic model.';
COMMENT ON COLUMN public.sessions.created_at IS 'Timestamp when the session was created.';
COMMENT ON COLUMN public.sessions.updated_at IS 'Timestamp when the session was last updated.';

-- Create the trigger function for updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to the sessions table
CREATE TRIGGER on_sessions_updated
BEFORE UPDATE ON public.sessions
FOR EACH ROW
EXECUTE PROCEDURE public.handle_updated_at();

-- Apply the updated_at trigger to the folders table
CREATE TRIGGER on_folders_updated
BEFORE UPDATE ON public.folders
FOR EACH ROW
EXECUTE PROCEDURE public.handle_updated_at();

-- Enable Row Level Security (RLS)
ALTER TABLE public.sessions ENABLE ROW LEVEL SECURITY;

-- Grant basic permissions (usually handled by Supabase, but explicit grant is safe)
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.sessions TO authenticated;

-- Grant basic permissions for folders table
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.folders TO authenticated;


-- ==========================================
-- 2. RLS POLICIES FOR sessions TABLE
-- ==========================================
-- Description: Ensures users can only access/modify their own session data.

-- Allow users to select their own sessions
CREATE POLICY "Allow individual user select access"
ON public.sessions
FOR SELECT
USING (auth.uid() = user_id);

-- Allow users to insert new sessions for themselves
CREATE POLICY "Allow individual user insert access"
ON public.sessions
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own sessions
CREATE POLICY "Allow individual user update access"
ON public.sessions
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own sessions (Optional: Remove if deletion is not desired)
CREATE POLICY "Allow individual user delete access"
ON public.sessions
FOR DELETE
USING (auth.uid() = user_id);

-- Ensure sessions.id is uniquely indexed for FK references from concept_events/actions
ALTER TABLE public.sessions
  ADD CONSTRAINT sessions_id_unique UNIQUE (id);


-- ==========================================
-- RLS POLICIES FOR folders TABLE
-- ==========================================
-- Description: Ensures users can only access/modify their own folders.

-- Allow users to select their own folders
CREATE POLICY "Allow individual user select access for folders"
ON public.folders
FOR SELECT
USING (auth.uid() = user_id);

-- Allow users to insert new folders for themselves
CREATE POLICY "Allow individual user insert access for folders"
ON public.folders
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own folders (e.g., rename, update KB)
CREATE POLICY "Allow individual user update access for folders"
ON public.folders
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own folders
CREATE POLICY "Allow individual user delete access for folders"
ON public.folders
FOR DELETE
USING (auth.uid() = user_id);


-- ==========================================
-- 3. STORAGE BUCKET AND POLICIES
-- ==========================================
-- Description: Creates the bucket and sets policies for user-specific folder access.

-- Create Storage Bucket (assuming public access controlled by RLS)
INSERT INTO storage.buckets (id, name, public)
VALUES ('document_uploads', 'document_uploads', true)
ON CONFLICT (id) DO NOTHING; -- Avoid error if bucket already exists

-- RLS Policies for Storage Objects (within the 'document_uploads' bucket)
-- Assumes files are stored with a path like 'user_id/folder_id/filename.pdf'

-- Allow users to view files in their own folder
CREATE POLICY "Allow user select access on own folder"
ON storage.objects
FOR SELECT
USING (
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid -- checks user_id (first part)
);

-- Allow users to insert files into their own folder
CREATE POLICY "Allow user insert access into own folder"
ON storage.objects
FOR INSERT
WITH CHECK ( -- User must own the folder they are uploading into
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid -- checks user_id
    AND EXISTS ( SELECT 1 FROM public.folders WHERE id = (storage.foldername(name))[2]::uuid AND user_id = auth.uid() ) -- checks folder_id (second part) exists and belongs to user
);

-- Allow users to update files in their own folder
CREATE POLICY "Allow user update access in own folder"
ON storage.objects
FOR UPDATE
USING ( -- Same logic as insert/delete: check user owns the folder
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid
);

-- Allow users to delete files from their own folder
CREATE POLICY "Allow user delete access from own folder"
ON storage.objects
FOR DELETE
USING (
    bucket_id = 'document_uploads'
    AND auth.uid() = (storage.foldername(name))[1]::uuid
);

-- ==========================================
-- 4. Concept Graph Table
-- ==========================================
CREATE TABLE public.concept_graph (
    id SERIAL PRIMARY KEY,
    prereq TEXT NOT NULL,
    concept TEXT NOT NULL
);

COMMENT ON TABLE public.concept_graph IS 'Stores prerequisite relationships between concepts';
COMMENT ON COLUMN public.concept_graph.prereq IS 'Prerequisite concept';
COMMENT ON COLUMN public.concept_graph.concept IS 'Target concept';

-- Enable RLS for concept_graph table
ALTER TABLE public.concept_graph ENABLE ROW LEVEL SECURITY;

-- Grant basic permissions for concept_graph table
GRANT SELECT, INSERT, UPDATE, DELETE ON public.concept_graph TO authenticated;

-- ==========================================
-- 5. CONCEPT EVENTS & ACTIONS LOGGING TABLES
-- ==========================================
CREATE TABLE public.concept_events (
    id SERIAL PRIMARY KEY,
    session_id UUID NOT NULL REFERENCES public.sessions(id),
    user_id UUID NOT NULL,
    concept TEXT NOT NULL,
    outcome TEXT NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    delta_mastery FLOAT NOT NULL
);
COMMENT ON TABLE public.concept_events IS 'Stores user interactions with concepts and changes in mastery';
ALTER TABLE public.concept_events ENABLE ROW LEVEL SECURITY;
GRANT SELECT, INSERT ON public.concept_events TO authenticated;

CREATE TABLE public.actions (
    id SERIAL PRIMARY KEY,
    session_id UUID NOT NULL REFERENCES public.sessions(id),
    user_id UUID NOT NULL,
    action_type TEXT NOT NULL,
    action_details JSONB,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.actions IS 'Stores orchestrator actions taken during tutoring sessions';
ALTER TABLE public.actions ENABLE ROW LEVEL SECURITY;
GRANT SELECT, INSERT ON public.actions TO authenticated;

-- ==========================================
-- 6. ACTION WEIGHTS TABLE
-- ==========================================
CREATE TABLE public.action_weights (
    action_type TEXT PRIMARY KEY,
    weight FLOAT NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.action_weights IS 'Stores sampling weights for orchestrator actions';
ALTER TABLE public.action_weights ENABLE ROW LEVEL SECURITY;
GRANT SELECT, INSERT, UPDATE ON public.action_weights TO authenticated;

-- ==========================================
-- END OF SCHEMA INITIALIZATION
-- ========================================== 